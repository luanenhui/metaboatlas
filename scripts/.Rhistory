ionMode = paste(ionMode, collapse=",")
# prepare experiment spectra
spec.exp = read.csv(file=file, header=TRUE)
spec.exp = as.matrix(spec.exp)
flag = apply(spec.exp, 1, function(x){mean(is.na(x))}) == 0
spec.exp = spec.exp[flag,]
# --- prepare library spectra --- #
# odbcDataSources()
conn = odbcConnect("PostgreSQL35W", uid="postgres", pwd="luanenhui1!")
sql = sprintf("select * from spectra where abs(\"PrecursorMZ\" - %s) < %s AND \"IonMode\" in (%s)", mz, tolerance, ionMode)
result = sqlQuery(conn, sql)
odbcClose(conn)
MS2 = apply(result, 1, function(x){
mz = as.numeric(unlist(strsplit(x["MZ"], split=",")))
intensity = as.numeric(unlist(strsplit(x["Intensity"], split=",")))
cbind(mz=mz, intensity=intensity)
})
names(MS2) = result[,"SpectraID"]
score = sapply(MS2, function(lib){
GetMatchResult(spec.exp = spec.exp, spec.lib = lib, ppm=args$tol*1000)
})
score.cutoff = score[score>cutoff]
# query compound info
rownames(result) = result[,"SpectraID"]
result = result[names(score.cutoff),]
compoundIDs = unique(result[,"CompoundID"])
compoundIDs = sprintf("'%s'",compoundIDs)
compoundIDs= paste(compoundIDs, collapse=",")
conn = odbcConnect("PostgreSQL35W", uid="postgres", pwd="luanenhui1!")
sql = sprintf("select * from Compound where \"MAID\" in (%s)", compoundIDs)
compoundInfo = sqlQuery(conn, sql)
odbcClose(conn)
rownames(compoundInfo) = compoundInfo[,1]
compoundInfo
conn = odbcConnect("PostgreSQL35W", uid="postgres", pwd="luanenhui1!")
sql = sprintf("select * from Compound where \"MAID\" in (%s)", compoundIDs)
compoundInfo = sqlQuery(conn, sql)
sql
reult
result
score
result
nrow(result)
suppressPackageStartupMessages(require(argparse))
suppressPackageStartupMessages(require(RODBC))
options(stringsAsFactors = FALSE)
# --- MS2 similarity algorithm --- #
{
#' translate Da to ppm
#'
#' Calculating difference of two m/z, then convert diff into ppm
#'
#' @param mz numeric vector, m/z values sorted by inreasing
#' @param mz.ppm.thr numeric, threshold of ppm difference
#' @return vector, ppm difference of m/z with the first m/z
#' @examples
#' \donttest{
#'   GetDiffMZppm(c(100.01,100.02, 100.03))
#' }
GetDiffMZppm <- function(mz, mz.ppm.thr = NULL) {
mz.diff <- diff(mz) / mz[-1] * 1e6
if (!is.null(mz.ppm.thr)) {
idx <- which(mz[-1] <= mz.ppm.thr)
mz.diff[idx] <- mz.diff[idx] * mz[-1][idx] / mz.ppm.thr
}
mz.diff
}
#' group m/z based on m/z tolerance
#'
#' As MassSpectrometry has fluctuate in m/z detection, one ion can be detected as two similar m/z, thus we need to combine these two m/z.
#' After Combining, m/z is the mean, and intensity is the sum.
#' @param spec numeric matrix, columns are "mz" and "intensity", represents an MS2 spectrum
#' @param ppm.ms2match numeric, m/z tolerance of MS2 in ppm mode
#' @param mz.ppm.thr used in GetDiffMZppm function
#' @return MS2 spectrum
MatchSpec <- function(spec, ppm.ms2match = 30, mz.ppm.thr = 400) {
while (TRUE) {
mz.diff.ppm <- GetDiffMZppm(spec[, 'mz'], mz.ppm.thr = mz.ppm.thr)
idx <- which(mz.diff.ppm < ppm.ms2match)
if (length(idx) > 0) {
i <- tail(idx, 1)
j <- which.max(spec[c(i, i + 1), 'intensity'])
spec[i, 'intensity'] <- spec[i + j - 1, 'intensity']
i2 <- i + 1
spec[i, 'mz'] <- spec[i2, 'mz']
spec <- spec[-i - 1, , drop = FALSE]
} else {
break
}
}
return(spec)
}
#' combine two MS2 spectrum based on m/z
#'
#' @param spec.exp MS2 spectrum
#' @param spec.lib MS2 spectrum
#' @param ppm.ms2match m/z tolerance of MS2
#' @return list, contains m/z alignment exp and lib spectrum
GetSpec2Match <- function(spec.exp, spec.lib, ppm.ms2match = 30) {
# align m/z of spec.exp and spec.lib
mz.pool   <- sort(c(spec.exp[, 1], spec.lib[, 1]))	# combine mz
spec.exp.pool = spec.lib.pool = cbind('mz' = mz.pool, 'intensity' = 0)		# construct alignment matrix
spec.exp.pool[match(spec.exp[,1], spec.exp.pool), "intensity"] = spec.exp[,2]
spec.lib.pool[match(spec.lib[,1], spec.lib.pool), "intensity"] = spec.lib[,2]
# combine nearby peaks
pk.spec  <- MatchSpec(spec.exp.pool, ppm.ms2match = ppm.ms2match)	# combine adjacent m/z if GetDiffMZppm < pps.ms2match)
lib.spec <- MatchSpec(spec.lib.pool, ppm.ms2match = ppm.ms2match)	# combine adjacent m/z if GetDiffMZppm < pps.ms2match)
return(list('exp' = pk.spec, 'lib' = lib.spec))
}
#' compute cosine similarity of two MS2 spectrum
#'
#' @param spec.exp experimental MS2 spectrum, columns are "mz" and "intensity"
#' @param spec.lib reference MS2 spectrum, columns are "mz" and "intensity"
#' @param sn signal to noise ratio
#' @param ppm m/z tolerence of MS2
#' @return cosine similarity of spec.exp and spec.lib
#' @export
GetMatchResult = function(spec.exp, spec.lib, sn=3, ppm=30){
# spec.lib=a; spec.exp=b; sn=10
colnames(spec.lib)=colnames(spec.exp)=c("mz","intensity")
mode(spec.lib) = mode(spec.exp) = "numeric"
spec.lib[,2] = spec.lib[,2]/max(spec.lib[,2])*100
spec.exp[,2] = spec.exp[,2]/max(spec.exp[,2])*100
spec.lib.filter = spec.lib[spec.lib[,2]>sn,,drop=FALSE]
spec.exp.filter = spec.exp[spec.exp[,2]>sn,,drop=FALSE]
# combine spec.lib and spec.exp
spec2match <- GetSpec2Match(spec.exp, spec.lib,                               # GetSpec2Match returns match(spec.exp, spec.exp+spec.lib) for "exp"
ppm.ms2match = ppm)			# and match(spec.lib, spec.exp+spec.lib) + spec.exp for "lib"
# compute cosine similarity
int.spec = spec2match$exp[,"intensity"]
int.lib = spec2match$lib[,"intensity"]
score = sum(int.spec*int.lib)/sqrt(sum(int.spec^2) * sum(int.lib^2))
return(score)
}
}
parser = ArgumentParser(description = "compare two MS2 spectrum and get similarity score")
parser$add_argument('-e', dest="exp", type="character", required=TRUE,
help='file containing experimental MS2 spectrum, columns are "mz" and "intensity"')
parser$add_argument('--mz', dest='mz', type="double",
required = TRUE,
help='precursorMZ')
parser$add_argument('--mode', dest='ionMode', type="integer",
required = TRUE,
help='ion mode, 1 represents Postive, 2 Negtive, 3 both')
parser$add_argument('--tol', dest='tol', type="double",
default=0.03,
help='m/z tolerence of MS2 using Da unit')
parser$add_argument('--cutoff', dest='cutoff', type="double",
default=0.5,
help='similarity score cutoff')
parser$add_argument('--sn', dest='sn', type="integer",
default = 3,
help='signal to noise ratio')
# args <- parser$parse_args()
# args = parser$parse_args(c("-e","F:/uploads/ms2.csv",
#                            "--mz", "118.08",
#                            "--mode", "1"))
args = parser$parse_args(c(
"-e", "F:/uploads/ms2.csv",
"--mz", "118.08",
"--mode", "1",
"--cutoff", "0.5",
"--tol", "0.03"
))
# set default dict
ionModes = c("Positive"=1, "Negative"=2, "None"=3, "P"=1)
# receive input
mz = args$mz
ionMode = args$ionMode
tolerance = args$tol
cutoff = args$cutoff
file = args$exp
# preprocessing input
ionMode = names(ionModes)[ionModes==ionMode]
ionMode = sprintf("'%s'",ionMode)
ionMode = paste(ionMode, collapse=",")
# prepare experiment spectra
spec.exp = read.csv(file=file, header=TRUE)
spec.exp = as.matrix(spec.exp)
flag = apply(spec.exp, 1, function(x){mean(is.na(x))}) == 0
spec.exp = spec.exp[flag,]
# --- prepare library spectra --- #
# odbcDataSources()
conn = odbcConnect("PostgreSQL35W", uid="postgres", pwd="luanenhui1!")
sql = sprintf("select * from spectra where abs(\"PrecursorMZ\" - %s) < %s AND \"IonMode\" in (%s)", mz, tolerance, ionMode)
result = sqlQuery(conn, sql)
odbcClose(conn)
if (nrow(result) == 0){
cat ("没有二级谱图符合条件&&&&&&&&&&")
} else {
MS2 = apply(result, 1, function(x){
mz = as.numeric(unlist(strsplit(x["MZ"], split=",")))
intensity = as.numeric(unlist(strsplit(x["Intensity"], split=",")))
cbind(mz=mz, intensity=intensity)
})
names(MS2) = result[,"SpectraID"]
score = sapply(MS2, function(lib){
GetMatchResult(spec.exp = spec.exp, spec.lib = lib, ppm=args$tol*1000)
})
score.cutoff = score[score>cutoff]
# query compound info
rownames(result) = result[,"SpectraID"]
result = result[names(score.cutoff),]
compoundIDs = unique(result[,"CompoundID"])
compoundIDs = sprintf("'%s'",compoundIDs)
compoundIDs= paste(compoundIDs, collapse=",")
conn = odbcConnect("PostgreSQL35W", uid="postgres", pwd="luanenhui1!")
sql = sprintf("select * from Compound where \"MAID\" in (%s)", compoundIDs)
compoundInfo = sqlQuery(conn, sql)
odbcClose(conn)
rownames(compoundInfo) = compoundInfo[,1]
# add annotation
finalResult = lapply(names(score.cutoff), function(name){
ID = name
# ID = names(score.cutoff)[1]
similarity = score.cutoff[ID]
precursorMZ = result[ID,"PrecursorMZ"]
precursorType = result[ID,"PrecursorType"]
Instrument = result[ID, "InstrumentType2"]
CE = result[ID,"CollisionEnergy"]
compoundID = result[ID,"CompoundID"]
Name = compoundInfo[compoundID, "NAME"]
Formula = compoundInfo[compoundID, "FORMULA"]
Pubchem = compoundInfo[compoundID, "PUBCHEM"]
MZ = result[ID,"MZ"]
Intensity = result[ID,"Intensity"]
return(c(ID, similarity, precursorMZ, precursorType, Instrument, CE, compoundID, Name, Formula, Pubchem, MZ, Intensity))
})
L1 = sapply(finalResult, paste, sep="", collapse="&")
L2 = paste(L1, collapse = ";")
cat(L2)
}
result
# --- prepare library spectra --- #
# odbcDataSources()
conn = odbcConnect("PostgreSQL35W", uid="postgres", pwd="luanenhui1!")
sql = sprintf("select * from spectra where abs(\"PrecursorMZ\" - %s) < %s AND \"IonMode\" in (%s)", mz, tolerance, ionMode)
result = sqlQuery(conn, sql)
odbcClose(conn)
result
MS2 = apply(result, 1, function(x){
mz = as.numeric(unlist(strsplit(x["MZ"], split=",")))
intensity = as.numeric(unlist(strsplit(x["Intensity"], split=",")))
cbind(mz=mz, intensity=intensity)
})
names(MS2) = result[,"SpectraID"]
score = sapply(MS2, function(lib){
GetMatchResult(spec.exp = spec.exp, spec.lib = lib, ppm=args$tol*1000)
})
score.cutoff = score[score>cutoff]
score.cutoff
length(score.cutoff)
rm(list = ls())
suppressPackageStartupMessages(require(argparse))
suppressPackageStartupMessages(require(RODBC))
options(stringsAsFactors = FALSE)
# --- MS2 similarity algorithm --- #
{
#' translate Da to ppm
#'
#' Calculating difference of two m/z, then convert diff into ppm
#'
#' @param mz numeric vector, m/z values sorted by inreasing
#' @param mz.ppm.thr numeric, threshold of ppm difference
#' @return vector, ppm difference of m/z with the first m/z
#' @examples
#' \donttest{
#'   GetDiffMZppm(c(100.01,100.02, 100.03))
#' }
GetDiffMZppm <- function(mz, mz.ppm.thr = NULL) {
mz.diff <- diff(mz) / mz[-1] * 1e6
if (!is.null(mz.ppm.thr)) {
idx <- which(mz[-1] <= mz.ppm.thr)
mz.diff[idx] <- mz.diff[idx] * mz[-1][idx] / mz.ppm.thr
}
mz.diff
}
#' group m/z based on m/z tolerance
#'
#' As MassSpectrometry has fluctuate in m/z detection, one ion can be detected as two similar m/z, thus we need to combine these two m/z.
#' After Combining, m/z is the mean, and intensity is the sum.
#' @param spec numeric matrix, columns are "mz" and "intensity", represents an MS2 spectrum
#' @param ppm.ms2match numeric, m/z tolerance of MS2 in ppm mode
#' @param mz.ppm.thr used in GetDiffMZppm function
#' @return MS2 spectrum
MatchSpec <- function(spec, ppm.ms2match = 30, mz.ppm.thr = 400) {
while (TRUE) {
mz.diff.ppm <- GetDiffMZppm(spec[, 'mz'], mz.ppm.thr = mz.ppm.thr)
idx <- which(mz.diff.ppm < ppm.ms2match)
if (length(idx) > 0) {
i <- tail(idx, 1)
j <- which.max(spec[c(i, i + 1), 'intensity'])
spec[i, 'intensity'] <- spec[i + j - 1, 'intensity']
i2 <- i + 1
spec[i, 'mz'] <- spec[i2, 'mz']
spec <- spec[-i - 1, , drop = FALSE]
} else {
break
}
}
return(spec)
}
#' combine two MS2 spectrum based on m/z
#'
#' @param spec.exp MS2 spectrum
#' @param spec.lib MS2 spectrum
#' @param ppm.ms2match m/z tolerance of MS2
#' @return list, contains m/z alignment exp and lib spectrum
GetSpec2Match <- function(spec.exp, spec.lib, ppm.ms2match = 30) {
# align m/z of spec.exp and spec.lib
mz.pool   <- sort(c(spec.exp[, 1], spec.lib[, 1]))	# combine mz
spec.exp.pool = spec.lib.pool = cbind('mz' = mz.pool, 'intensity' = 0)		# construct alignment matrix
spec.exp.pool[match(spec.exp[,1], spec.exp.pool), "intensity"] = spec.exp[,2]
spec.lib.pool[match(spec.lib[,1], spec.lib.pool), "intensity"] = spec.lib[,2]
# combine nearby peaks
pk.spec  <- MatchSpec(spec.exp.pool, ppm.ms2match = ppm.ms2match)	# combine adjacent m/z if GetDiffMZppm < pps.ms2match)
lib.spec <- MatchSpec(spec.lib.pool, ppm.ms2match = ppm.ms2match)	# combine adjacent m/z if GetDiffMZppm < pps.ms2match)
return(list('exp' = pk.spec, 'lib' = lib.spec))
}
#' compute cosine similarity of two MS2 spectrum
#'
#' @param spec.exp experimental MS2 spectrum, columns are "mz" and "intensity"
#' @param spec.lib reference MS2 spectrum, columns are "mz" and "intensity"
#' @param sn signal to noise ratio
#' @param ppm m/z tolerence of MS2
#' @return cosine similarity of spec.exp and spec.lib
#' @export
GetMatchResult = function(spec.exp, spec.lib, sn=3, ppm=30){
# spec.lib=a; spec.exp=b; sn=10
colnames(spec.lib)=colnames(spec.exp)=c("mz","intensity")
mode(spec.lib) = mode(spec.exp) = "numeric"
spec.lib[,2] = spec.lib[,2]/max(spec.lib[,2])*100
spec.exp[,2] = spec.exp[,2]/max(spec.exp[,2])*100
spec.lib.filter = spec.lib[spec.lib[,2]>sn,,drop=FALSE]
spec.exp.filter = spec.exp[spec.exp[,2]>sn,,drop=FALSE]
# combine spec.lib and spec.exp
spec2match <- GetSpec2Match(spec.exp, spec.lib,                               # GetSpec2Match returns match(spec.exp, spec.exp+spec.lib) for "exp"
ppm.ms2match = ppm)			# and match(spec.lib, spec.exp+spec.lib) + spec.exp for "lib"
# compute cosine similarity
int.spec = spec2match$exp[,"intensity"]
int.lib = spec2match$lib[,"intensity"]
score = sum(int.spec*int.lib)/sqrt(sum(int.spec^2) * sum(int.lib^2))
return(score)
}
}
parser = ArgumentParser(description = "compare two MS2 spectrum and get similarity score")
parser$add_argument('-e', dest="exp", type="character", required=TRUE,
help='file containing experimental MS2 spectrum, columns are "mz" and "intensity"')
parser$add_argument('--mz', dest='mz', type="double",
required = TRUE,
help='precursorMZ')
parser$add_argument('--mode', dest='ionMode', type="integer",
required = TRUE,
help='ion mode, 1 represents Postive, 2 Negtive, 3 both')
parser$add_argument('--tol', dest='tol', type="double",
default=0.03,
help='m/z tolerence of MS2 using Da unit')
parser$add_argument('--cutoff', dest='cutoff', type="double",
default=0.5,
help='similarity score cutoff')
parser$add_argument('--sn', dest='sn', type="integer",
default = 3,
help='signal to noise ratio')
# args <- parser$parse_args()
# args = parser$parse_args(c("-e","F:/uploads/ms2.csv",
#                            "--mz", "118.08",
#                            "--mode", "1"))
args = parser$parse_args(c(
"-e", "F:/uploads/ms2.csv",
"--mz", "118.08",
"--mode", "1",
"--cutoff", "0.5",
"--tol", "0.03"
))
# set default dict
ionModes = c("Positive"=1, "Negative"=2, "None"=3, "P"=1)
# receive input
mz = args$mz
ionMode = args$ionMode
tolerance = args$tol
cutoff = args$cutoff
file = args$exp
# preprocessing input
ionMode = names(ionModes)[ionModes==ionMode]
ionMode = sprintf("'%s'",ionMode)
ionMode = paste(ionMode, collapse=",")
# prepare experiment spectra
spec.exp = read.csv(file=file, header=TRUE)
spec.exp = as.matrix(spec.exp)
flag = apply(spec.exp, 1, function(x){mean(is.na(x))}) == 0
spec.exp = spec.exp[flag,]
# --- prepare library spectra --- #
# odbcDataSources()
conn = odbcConnect("PostgreSQL35W", uid="postgres", pwd="luanenhui1!")
sql = sprintf("select * from spectra where abs(\"PrecursorMZ\" - %s) < %s AND \"IonMode\" in (%s)", mz, tolerance, ionMode)
result = sqlQuery(conn, sql)
odbcClose(conn)
MS2 = apply(result, 1, function(x){
mz = as.numeric(unlist(strsplit(x["MZ"], split=",")))
intensity = as.numeric(unlist(strsplit(x["Intensity"], split=",")))
cbind(mz=mz, intensity=intensity)
})
names(MS2) = result[,"SpectraID"]
score = sapply(MS2, function(lib){
GetMatchResult(spec.exp = spec.exp, spec.lib = lib, ppm=args$tol*1000)
})
score.cutoff = score[score>cutoff]
if (length(score.cutoff) == 0){
cat ("没有二级谱图符合条件&&&&&&&&&&")
} else {
# query compound info
rownames(result) = result[,"SpectraID"]
result = result[names(score.cutoff),]
compoundIDs = unique(result[,"CompoundID"])
compoundIDs = sprintf("'%s'",compoundIDs)
compoundIDs= paste(compoundIDs, collapse=",")
conn = odbcConnect("PostgreSQL35W", uid="postgres", pwd="luanenhui1!")
sql = sprintf("select * from Compound where \"MAID\" in (%s)", compoundIDs)
compoundInfo = sqlQuery(conn, sql)
odbcClose(conn)
rownames(compoundInfo) = compoundInfo[,1]
# add annotation
finalResult = lapply(names(score.cutoff), function(name){
ID = name
# ID = names(score.cutoff)[1]
similarity = score.cutoff[ID]
precursorMZ = result[ID,"PrecursorMZ"]
precursorType = result[ID,"PrecursorType"]
Instrument = result[ID, "InstrumentType2"]
CE = result[ID,"CollisionEnergy"]
compoundID = result[ID,"CompoundID"]
Name = compoundInfo[compoundID, "NAME"]
Formula = compoundInfo[compoundID, "FORMULA"]
Pubchem = compoundInfo[compoundID, "PUBCHEM"]
MZ = result[ID,"MZ"]
Intensity = result[ID,"Intensity"]
return(c(ID, similarity, precursorMZ, precursorType, Instrument, CE, compoundID, Name, Formula, Pubchem, MZ, Intensity))
})
L1 = sapply(finalResult, paste, sep="", collapse="&")
L2 = paste(L1, collapse = ";")
cat(L2)
}
install.packages("plotly")
help(package="plotly")
plot(x, type="l")
x = 1:10
plot(x, type="l")
plot(x, type="h")
setwd("F:/metaboAtlasData")
dir()
setwd("F:/metaboAtlasData/spectraNew/")
options(stringsAsFactors = FALSE)
# read compound
compoundID = read.table("../compoundID.txt", header = FALSE)
compoundID = compoundID[,1]
# read spectra
files = list.files()
files
raw = lapply(files, function(file){
read.table(file, header=FALSE, sep="\t")
})
result = do.call(rbind, raw)
colnames(result) = c("SpectraID", "PrecursorMZ", "PrecursorType", "IonMode",
"InstrumentType", "InstrumentType2", "Level",
"CollisionEnergy", "ExactMass","Resource", "MZ", "Intensity", "CompoundID")
dim(result)
# filter
flagDup = duplicated(result[,"SpectraID"])
table(flagDup)
result = result[!flagDup,]
dim(result)
# # filter
summary(result)
flagNA = is.na(result[,"PrecursorMZ"]) | is.na(result[,"ExactMass"])
table(flagNA)
head(which(flagNA))
result[93,]
flagNA = is.na(result[,"PrecursorMZ"]) # | is.na(result[,"ExactMass"])
table(flagNA)
which(flagNA)
head(which(flagNA))
result["303",]
files
head(which(flagNA))
# # filter
summary(result)
# filter ForeinKey
flagForeign = result[,"CompoundID"] %in% compoundID
table(flagForeign)
flagNA = is.na(result[,"PrecursorMZ"]) | is.na(result[,"ExactMass"])
table(flagNA)
# filter ForeinKey
flagForeign = result[,"CompoundID"] %in% compoundID
table(flagForeign)
resultOld = result
dim(result)
# # filter
summary(result)
flagNA = is.na(result[,"PrecursorMZ"]) | is.na(result[,"ExactMass"])
table(flagNA)
result = result[!flagNA,]
dim(result)
# filter ForeinKey
flagForeign = result[,"CompoundID"] %in% compoundID
table(flagForeign)
result = result[flagForeign,]
dim(result)
write.table(result, file="all.txt", sep="\t", row.names = FALSE, quote = FALSE)
setwd("F:/metaboatlas/metaboatlas/scripts")
setwd("F:/metaboatlas/metaboatlas")
dir()
setwd("../scripts/")
